diff --git a/ckeditor_mentions.info.yml b/ckeditor_mentions.info.yml
index bd451a8..0290625 100755
--- a/ckeditor_mentions.info.yml
+++ b/ckeditor_mentions.info.yml
@@ -3,6 +3,7 @@ type: module
 description: CKEditor plugin for user mentioning and inserting.
 package: CKEditor
 core: '8.x'
+core_version_requirement: ^8
 
 dependencies:
   - drupal:ckeditor
diff --git a/ckeditor_mentions.install b/ckeditor_mentions.install
index 89b16ff..dcd0f4d 100755
--- a/ckeditor_mentions.install
+++ b/ckeditor_mentions.install
@@ -20,8 +20,8 @@ function ckeditor_mentions_install() {
     'id' => 'image_scale_and_crop',
     'weight' => 0,
     'data' => [
-      'width' => 20,
-      'height' => 20,
+      'width' => 60,
+      'height' => 60,
     ],
   ];
   $effect = \Drupal::service('plugin.manager.image.effect')->createInstance($configuration['id'], $configuration);
@@ -30,3 +30,40 @@ function ckeditor_mentions_install() {
   $style->addImageEffect($effect->getConfiguration());
   $style->save();
 }
+
+/**
+ * Implements hook_uninstall().
+ */
+function ckeditor_mentions_uninstall() {
+  // Remove tiny icon image style.
+  Drupal::configFactory()->getEditable('image.style.mentions_icon')->delete();
+}
+
+/**
+ * Implements hook_requirements().
+ */
+function ckeditor_mentions_requirements($phase) {
+  $requirements = [];
+
+  if ($phase === 'install' || $phase === 'runtime') {
+    $plugin_detected = file_exists(DRUPAL_ROOT . '/libraries/ckeditor/plugins/mentions/plugin.js');
+
+    if ($plugin_detected) {
+      $requirements['mentions'] = [
+        'title' => t('CKEditor Mentions'),
+        'value' => t('Plugin detected'),
+        'severity' => REQUIREMENT_OK,
+      ];
+    }
+    else {
+      $requirements['mentions'] = [
+        'title' => t('CKEditor Mentions'),
+        'value' => t('Plugin not detected'),
+        'severity' => REQUIREMENT_ERROR,
+        'description' => t('Before you can use the CKEditor Mentions module, you need to download the mentions plugin from ckeditor.com and place it in /libraries/mentions. Check the README.txt for more information. <a href=":plugin_url">Get the plugin here</a>.', [':plugin_url' => 'https://ckeditor.com/cke4/addon/mentions']),
+      ];
+    }
+  }
+
+  return $requirements;
+}
diff --git a/ckeditor_mentions.libraries.yml b/ckeditor_mentions.libraries.yml
index daef552..f60450b 100755
--- a/ckeditor_mentions.libraries.yml
+++ b/ckeditor_mentions.libraries.yml
@@ -1,5 +1,5 @@
-drupal.ckeditor.plugins.mentions:
+ckeditor_mentions:
   version: VERSION
   css:
-    component:
+    layout:
       css/plugins/mentions/ckeditor_mentions.css: {}
diff --git a/ckeditor_mentions.module b/ckeditor_mentions.module
index 7723abe..4b7bdb1 100755
--- a/ckeditor_mentions.module
+++ b/ckeditor_mentions.module
@@ -7,6 +7,7 @@
 
 use Drupal\ckeditor_mentions\CKEditorMentionEvent;
 use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
 
 /**
  * Implements hook_editor_js_settings_alter().
@@ -52,3 +53,30 @@ function ckeditor_mentions_entity_insert(EntityInterface $entity) {
   $mentions = \Drupal::getContainer()->get('ckeditor_mentions.mention_event_dispatcher');
   $mentions->dispatchMentionEvent($entity, CKEditorMentionEvent::MENTION_FIRST);
 }
+
+/**
+ * Implements hook_help().
+ */
+function ckeditor_mentions_help($route_name, RouteMatchInterface $route_match) {
+  switch ($route_name) {
+    case 'help.page.ckeditor_mentions':
+      $output = '';
+      $output .= '<h3>' . t('Ckeditor Mentions') . '</h3>';
+      $output .= '<p>' . t('The module adds a mentions support to the CKEditor.') . '</p>';
+      $output .= '<h3>' . t('Uses') . '</h3>';
+      $output .= '<dl>';
+      $output .= '<dt>' . t('Settings') . '</dt>';
+      $output .= '<dd>' . t('In the <a href=":text-formats">text formats</a> that use ckeditor, configure each text format that you want to add mentions support.', [':text-formats' => \Drupal::url('filter.admin_overview')]) . '</dd>';
+      $output .= '</dl>';
+      return $output;
+
+    default:
+  }
+}
+
+/**
+ * {@inheritdoc}
+ */
+function ckeditor_mentions_preprocess_html(&$variables) {
+  $variables['page']['#attached']['library'][] = 'ckeditor_mentions/ckeditor_mentions';
+}
diff --git a/ckeditor_mentions.routing.yml b/ckeditor_mentions.routing.yml
index 112a4c2..0eb81aa 100755
--- a/ckeditor_mentions.routing.yml
+++ b/ckeditor_mentions.routing.yml
@@ -3,6 +3,7 @@ ckeditor_mentions.ajax_callback:
   defaults:
     _controller: 'Drupal\ckeditor_mentions\Controller\CKMentionsController::getRealNameMatch'
     _title: 'Retrieve realname match'
+    match: ''
+  methods: [GET]
   requirements:
     _permission: 'use inline mentions'
-    match: ^[0-9a-zA-Z]+
diff --git a/css/plugins/mentions/ckeditor_mentions.css b/css/plugins/mentions/ckeditor_mentions.css
index 3441610..0fb4d87 100755
--- a/css/plugins/mentions/ckeditor_mentions.css
+++ b/css/plugins/mentions/ckeditor_mentions.css
@@ -1,55 +1,20 @@
-.mention-wrapper {
-  position: relative;
+ul.cke_autocomplete_panel {
+  width: 300px;
 }
 
-.mention-suggestions {
-  position: absolute;
-  z-index: 10000;
-  top: 1px;
+ul.cke_autocomplete_panel li {
+  display: flex;
+  align-items: center;
 }
 
-.mention-suggestions ul {
-  list-style: none;
-}
-
-.mention-wrapper .mention-suggestions ul {
-  border-bottom: 1px solid #ccc;
-  border-left: 1px solid #ccc;
-  border-right: 1px solid #ccc;
-  padding: 0;
-  min-width: 250px;
-  width: 90%;
-  background: #fff;
-}
-
-.mention-wrapper .mention-suggestions li {
-  border-bottom: 1px solid #eee;
-  padding: 5px 5px 5px 10px;
-}
-
-.mention-wrapper .mention-suggestions ul,
-.mention-wrapper .mention-suggestions li {
-  margin: 0;
-}
-
-.mention-wrapper .mention-suggestions li a {
-  width: 85%;
-  display: inline-block;
-  padding: 2px;
-  vertical-align: middle;
-  text-decoration: none;
-}
-
-.mention-wrapper .mention-suggestions li a:hover {
-  text-decoration: none;
-}
-
-.mention-wrapper .mention-suggestions li .mention-icon {
+ul.cke_autocomplete_panel .photo {
+  border-radius: 50%;
+  margin-right: 5px;
   width: 20px;
   height: 20px;
-  margin: 3px 10px 0 0;
-  border: 1px solid #ccc;
-  display: inline-block;
-  vertical-align: middle;
-  overflow: hidden;
+}
+
+.cke_autocomplete_panel .realname {
+  display: block;
+  padding-left: 5px;
 }
diff --git a/img/placeholder.png b/img/placeholder.png
new file mode 100644
index 0000000000000000000000000000000000000000..0aa985b76629343b3d158bb241fb48c9d34e03d8
GIT binary patch
literal 608
zcmV-m0-ybfP)<h;3K|Lk000e1NJLTq001xm001xu1^@s6R|5Hm0006fNkl<ZcmeI$
z0fZt^7{KvE2#XK~A%w*u92Q{-hj3UxSOi!s4vRquheHS<ga9Ed7K;!<SioTs27^Ti
zVesAm2%vfIyZI&^^XCUprg`(;*L*RnsHmuh9>!Q;jqTA2bBxeM6&FzjAyyED1aEjk
z8E3DIXY3#u#pt1gv(!NZG4>m`$h8oXqXZ8y?+P=>nf$U|QgevH6kXh)j&GQ&FT$w4
z@`3E&RBh}bUJRDgJ;c)iH*oc!d?s$Q?D3yD-SUNUcPc^M0HSaW-+B;*9#jQ5Kom4J
zAquhf#2!MFu9S0=C_TZu4~S9=zTH8T-gLKDuMgiQ5TyjwJjaCuO}J_zfoP!%XD=BC
zvYKP*#E^e9g0l@IgB?QD@wW=v7(z0d!&wBmP%Ai-3%32=FCc=m7-Han?NI_Tu!ggD
zh*E+j`e>inuLE@O6KjYT7I5~eoKb!tfVMgY$`=D;t0^==h%&NP!O(IlZF#KiJ6P9+
zIMm=(WHl8k8|u#h{jgO<UVVj}5W>4g%GTFGUOlFaCl#m~r+nBotZSwGXwOg=q`U%&
zjW42=@?8<iwzm}687-$C4iMFnHT?H9LjY|Jk3%y==1N$4oDDOyQNpRp_>Kh<_YY%N
zfF;Dk9xF^S#0XPt6t8OLxPoaVOdvVyBiA0WhZy_BJ<d{qvC*7=zyKATy#^+TAW9z?
uBEUt|!T_&$M+`ZNu)zyLG*MJkWY8b?kdfH2oV~OF0000<MNUMnLSTXxkpU6_

literal 0
HcmV?d00001

diff --git a/js/plugins/mentions/plugin.js b/js/plugins/mentions/plugin.js
deleted file mode 100755
index 29ddbc7..0000000
--- a/js/plugins/mentions/plugin.js
+++ /dev/null
@@ -1,164 +0,0 @@
-/**
- * @file
- * Contains plugin.js.
- */
-
-(function ($, Drupal, drupalSettings, CKEDITOR) {
-
-  'use strict';
-
-  CKEDITOR.plugins.add('mentions', {
-    hidpi: true,
-
-    afterInit: function (editor) {
-
-      editor.observe = 0;
-      editor.replacementChars = [];
-      editor.timeout_delay = 500;
-      editor.observe_count = 3;
-      editor.timeout_id = null;
-      editor.image = false;
-
-      if (drupalSettings.editor && drupalSettings.editor.formats !== 'undefined') {
-        for (var key in drupalSettings.editor.formats) {
-          // Allow for custom settings - settings identical regardless of format.
-          if (typeof drupalSettings.editor.formats[key].editorSettings.mentions !== 'undefined') {
-            if (drupalSettings.editor.formats[key].editorSettings.mentions.charcount >= 3) {
-              editor.observe_count = drupalSettings.editor.formats[key].editorSettings.mentions.charcount;
-            }
-
-            if (drupalSettings.editor.formats[key].editorSettings.mentions.image !== 'undefined' && drupalSettings.editor.formats[key].editorSettings.mentions.image === 1) {
-              editor.image = true;
-            }
-
-            if (drupalSettings.editor.formats[key].editorSettings.mentions.timeout >= 500) {
-              editor.timeout_delay = drupalSettings.editor.formats[key].editorSettings.mentions.timeout;
-            }
-            break;
-          }
-        }
-      }
-
-      editor.on("key", function (event) {
-        var key = event.data.domEvent.$.key;
-        checkMentions(event.editor, key);
-      }, editor, null, 50);
-
-      function checkMentions(editorInstance, key) {
-        // Stop/ignore input when certain character codes occur.
-        if (breakCheck(key)) {
-          editorInstance.replacementChars = [];
-          editorInstance.observe = 0;
-          clearTimeout(editorInstance.timeout_id);
-          clearSelections();
-        }
-        else {
-          if (editorInstance.observe) {
-            if (key === 'Backspace') {
-              // If backspacing during a selection pop the last item in the array out.
-              editorInstance.replacementChars.pop();
-            }
-            else if (key.match(/^[0-9a-zA-Z]$/)) {
-              // Keep weird characters out of list (spaces, line breaks, shift key, etc)
-              // pushes characters into array only after check for '@' so @ is not part of query.
-              editorInstance.replacementChars.push(key);
-            }
-
-            // Only ping JSON callback when there are a certain number of characters in array.
-            if (editorInstance.replacementChars.length >= editorInstance.observe_count) {
-              editorInstance.timeout_id = setTimeout(timeoutCallback, editorInstance.timeout_delay, [editorInstance]);
-            }
-          }
-          if (key === '@' && editorInstance.observe === 0) {
-            editorInstance.observe = 1;
-          }
-        }
-      }
-
-      // Check for realname and image information for input.
-      function timeoutCallback(args) {
-        var editorInstance = args[0];
-        var substr = editorInstance.replacementChars.join('').toLowerCase();
-        var date = new Date();
-
-        var element = editorInstance.element.getId();
-        var parentElement = $('#' + element).parent();
-
-        if (substr) {
-            $.ajax({
-              url: "/ckeditor-mentions/ajax/" + substr + "?t=" + date.getUTCSeconds(),
-              beforeSend: function (xhr) {
-                xhr.overrideMimeType("text/plain; charset=x-user-defined");
-              }
-            })
-            .done(function (data) {
-              var content = $.parseJSON(data);
-              var href;
-
-              if (content.data && content.result === 'success') {
-                clearSelections();
-                var links = '<ul class="mentions">';
-                for (var key in content.data) {
-                  links += '<li class="mention">';
-
-                  if (editorInstance.image) {
-                    if (content.data[key].image) {
-                      links += '<img class= "mention-icon" src="' + content.data[key].image + '" />';
-                    }
-                    else {
-                      links += '<div class="mention-icon default-image"></div>';
-                    }
-                  }
-
-                  if (/^\d+$/.test(content.data[key].uid)) {
-                    href = '/user/' + content.data[key].uid;
-                  }
-                  else {
-                    href = '#' + content.data[key].uid;
-                  }
-                  links += '<a href="' + href + '" data-mention="' + content.data[key].uid + '">' + content.data[key].name + '</a>';
-                  links += '</li>';
-                }
-                links += '</ul>';
-                $('<div class="mention-wrapper"><div class="mention-suggestions">' + links + '</div></div>').insertAfter(parentElement);
-                $('.mention-wrapper a').bind('click', function () {
-                  // Had to reconstruct link this way to avoid pulling over image markup.
-                  var link = '<a href="' + $(this).attr('href') + '" data-mention="' + $(this).attr('data-mention') + '">' + $(this).html() + '</a>&nbsp;';
-
-                  var pattern = new RegExp('@' + substr, 'i');
-                  var content = editorInstance.getData();
-                  var newContent = content.replace(pattern, link + '&nbsp;');
-                  editorInstance.setData(newContent);
-                  editorInstance.observe = 0;
-                  editorInstance.replacementChars = [];
-
-                  clearSelections();
-
-                  return false;
-                });
-              }
-            });
-        }
-
-        clearTimeout(editorInstance.timeout_id);
-      }
-
-      function clearSelections() {
-          $('.mention-wrapper a').unbind();
-          $('.mention-wrapper').remove();
-      }
-
-      function breakCheck(key) {
-        var special = ['Enter', 'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown', 'Delete', 'Home'];
-        for (var i = 0; i < special.length; i++) {
-          if (special[i] === key) {
-            return true;
-          }
-        }
-        return false;
-      }
-    },
-
-  });
-
-})(jQuery, Drupal, drupalSettings, CKEDITOR);
diff --git a/src/Controller/CKMentionsController.php b/src/Controller/CKMentionsController.php
index 6e888bf..2a42376 100755
--- a/src/Controller/CKMentionsController.php
+++ b/src/Controller/CKMentionsController.php
@@ -4,11 +4,10 @@ namespace Drupal\ckeditor_mentions\Controller;
 
 use Drupal\ckeditor_mentions\CKEditorMentionSuggestionEvent;
 use Drupal\Core\Controller\ControllerBase;
+use Drupal\Core\Database\Connection;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
-use Drupal\Core\Database\Database;
-use Drupal\image\Entity\ImageStyle;
 
 /**
  * Route callback for matches.
@@ -23,22 +22,35 @@ class CKMentionsController extends ControllerBase {
   protected $eventDispatcher;
 
   /**
-   * {@inheritdoc}
+   * Database connection.
+   *
+   * @var \Drupal\Core\Database\Connection
    */
-  public static function create(ContainerInterface $container) {
-    return new static(
-      $container->get('event_dispatcher')
-    );
-  }
+  protected $database;
 
   /**
    * CKMentionsController constructor.
    *
    * @param \Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher
    *   The Event dispatcher service.
+   * @param \Drupal\Core\Database\Connection $database
+   *   The database connection.
    */
-  public function __construct(EventDispatcherInterface $eventDispatcher) {
+  public function __construct(EventDispatcherInterface $eventDispatcher, Connection $database) {
     $this->eventDispatcher = $eventDispatcher;
+    $this->database = $database;
+    $this->entityTypeManager();
+    $this->moduleHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('event_dispatcher'),
+      $container->get('database')
+    );
   }
 
   /**
@@ -47,56 +59,79 @@ class CKMentionsController extends ControllerBase {
    * @param string $match
    *   Match value.
    *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
+   * @return \Symfony\Component\HttpFoundation\JsonResponse|void
    *   Json of matches.
    */
   public function getRealNameMatch($match = '') {
-    $message = ['result' => 'fail'];
-
-    $str = trim(str_replace('@', '', $match));
-    $str = strip_tags($str);
-
-    if ($str) {
-      $uid = \Drupal::currentUser()->id();
-      $database = Database::getConnection('default');
-
-      $query = $database->select('realname', 'rn');
-      $query->leftJoin('users_field_data', 'ud', 'ud.uid = rn.uid');
-      $query->leftJoin('user__user_picture', 'up', 'up.entity_id = rn.uid');
-      $query->leftJoin('file_managed', 'fm', 'fm.fid = up.user_picture_target_id');
-      $query->fields('rn', ['uid', 'realname']);
-      $query->fields('fm', ['uri']);
-      $query->condition('rn.realname', '%' . $query->escapeLike($str) . '%', 'LIKE');
-      $query->isNotNull('rn.realname');
-      $query->condition('ud.status', 1);
-
-      // Exclude currently logged in user from returned list.
-      if ($uid) {
-        $query->condition('rn.uid', $uid, '!=');
+    // Initialize the response array.
+    $response_array = [];
+    // Load up user storage.
+    /* @var \Drupal\user\UserStorage $user_storage **/
+    $user_storage = $this->entityTypeManager->getStorage('user');
+
+    $ids = $this->getUserIds($match);
+
+    // Load up all user IDs.
+    $users = $user_storage->loadMultiple($ids);
+
+    // The image style to use.
+    // @Todo: Check if the style was deleted. Move style type into configuration form?
+    $style = $this->entityTypeManager->getStorage('image_style')->load('mentions_icon');
+
+    // @Todo: add placeholder image.
+    $placeholder_image = base_path() . $this->moduleHandler->getModule('ckeditor_mentions')->getPath() . '/img/placeholder.png';
+
+    // Form response array.
+    /**
+     * @var \Drupal\user\Entity\User $user
+     */
+    foreach ($users as $id => $user) {
+      $user_image_url = NULL;
+      if ($user->hasField('user_picture') && !$user->user_picture->isEmpty()) {
+        $user_image_url = $style->buildUrl($user->user_picture->entity->getFileUri());
       }
 
-      $results = $query->execute();
-      $matches = [];
-
-      foreach ($results as $result) {
-        $url = '';
-        if ($result->uri) {
-          $url = ImageStyle::load('mentions_icon')->buildUrl($result->uri);
-        }
-        $matches[] = [
-          'uid' => $result->uid,
-          'name' => $result->realname,
-          'image' => $url,
-        ];
-      }
+      $response_array[] = [
+        'id' => $id,
+        'realname' => $user->realname,
+        'account_name' => $user->getAccountName(),
+        'email' => $user->getEmail(),
+        'avatar' => $user_image_url ?? $placeholder_image,
+        'user_page' => $user->toUrl()->toString(),
+      ];
 
       $suggestion_event = new CKEditorMentionSuggestionEvent($match);
-      $suggestion_event = $this->eventDispatcher->dispatch('ckeditor_mentions.suggestion', $suggestion_event);
-      $matches = array_merge($suggestion_event->getSuggestions(), $matches);
-      $message = ['result' => 'success', 'data' => $matches];
+      $suggestion_event->setSuggestions($response_array);
+      $this->eventDispatcher->dispatch(CKEditorMentionSuggestionEvent::SUGGESTION, $suggestion_event);
+      $response_array = $suggestion_event->getSuggestions();
     }
 
-    return new JsonResponse($message);
+    return new JsonResponse($response_array);
+  }
+
+  /**
+   * Get user ids matched the string.
+   *
+   * @param string $match
+   *   The string to match.
+   *
+   * @return array
+   *   User ids.
+   */
+  protected function getUserIds(string $match) {
+    $query = $this->database->select('realname', 'rn');
+
+    // @Todo: Add ability to match the account name?
+    $query->leftJoin('users_field_data', 'ud', 'ud.uid = rn.uid');
+    $query->fields('rn', ['uid', 'realname']);
+    $query->condition('rn.realname', '%' . $query->escapeLike($match) . '%', 'LIKE');
+    $query->isNotNull('rn.realname');
+    $query->condition('ud.status', 1);
+    $query->condition('rn.uid', $this->currentUser()->id(), '!=');
+
+    // @Todo: add ability to limit query and sort?
+    return $query->execute()
+      ->fetchCol();
   }
 
 }
diff --git a/src/MentionEventDispatcher.php b/src/MentionEventDispatcher.php
index 01e9f72..f785b20 100644
--- a/src/MentionEventDispatcher.php
+++ b/src/MentionEventDispatcher.php
@@ -67,6 +67,10 @@ class MentionEventDispatcher {
     $dispatcher = $this->eventDispatcher;
     // Creating our event class object.
     $mentioned_users = $this->getMentionsFromEntity($entity);
+    // Nothing to do here, if mentioned users not present.
+    if (empty($mentioned_users)) {
+      return;
+    }
     $event = new CKEditorMentionEvent($entity, $mentioned_users);
     // Dispatching the event through the ‘dispatch’  method, passing event name
     // and event object ‘$event’ as parameters.
@@ -164,6 +168,10 @@ class MentionEventDispatcher {
     foreach ($anchors as $anchor) {
       $mentioned_user_id = $anchor->getAttribute('data-mention');
       $link_text = $anchor->textContent;
+
+      // Strip the @ from the beginins of the name.
+      $link_text = ltrim($link_text, '@');
+
       if (empty($mentioned_user_id)) {
         continue;
       }
diff --git a/src/Plugin/CKEditorPlugin/Ajax.php b/src/Plugin/CKEditorPlugin/Ajax.php
new file mode 100644
index 0000000..d13c740
--- /dev/null
+++ b/src/Plugin/CKEditorPlugin/Ajax.php
@@ -0,0 +1,47 @@
+<?php
+
+namespace Drupal\ckeditor_mentions\Plugin\CKEditorPlugin;
+
+use Drupal\ckeditor\CKEditorPluginBase;
+use Drupal\editor\Entity\Editor;
+
+/**
+ * Defines the "mentions" plugin.
+ *
+ * @CKEditorPlugin(
+ *   id = "ajax",
+ *   label = @Translation("Ajax"),
+ *   module = "ckeditor_mention"
+ * )
+ */
+class Ajax extends CKEditorPluginBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFile() {
+    return 'libraries/ckeditor/plugins/ajax/plugin.js';
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  public function getConfig(Editor $editor) {
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDependencies(Editor $editor) {
+    return ['xml'];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getButtons() {
+    return [];
+  }
+
+}
diff --git a/src/Plugin/CKEditorPlugin/Autocomplete.php b/src/Plugin/CKEditorPlugin/Autocomplete.php
new file mode 100644
index 0000000..d601d43
--- /dev/null
+++ b/src/Plugin/CKEditorPlugin/Autocomplete.php
@@ -0,0 +1,47 @@
+<?php
+
+namespace Drupal\ckeditor_mentions\Plugin\CKEditorPlugin;
+
+use Drupal\ckeditor\CKEditorPluginBase;
+use Drupal\editor\Entity\Editor;
+
+/**
+ * Defines the "mentions" plugin.
+ *
+ * @CKEditorPlugin(
+ *   id = "autocomplete",
+ *   label = @Translation("Autocomplete"),
+ *   module = "ckeditor_mention"
+ * )
+ */
+class Autocomplete extends CKEditorPluginBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFile() {
+    return 'libraries/ckeditor/plugins/autocomplete/plugin.js';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getConfig(Editor $editor) {
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDependencies(Editor $editor) {
+    return ['textwatcher'];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getButtons() {
+    return [];
+  }
+
+}
diff --git a/src/Plugin/CKEditorPlugin/Mentions.php b/src/Plugin/CKEditorPlugin/Mentions.php
index 233accd..11e53ac 100755
--- a/src/Plugin/CKEditorPlugin/Mentions.php
+++ b/src/Plugin/CKEditorPlugin/Mentions.php
@@ -14,7 +14,8 @@ use Drupal\ckeditor\CKEditorPluginCssInterface;
  *
  * @CKEditorPlugin(
  *   id = "mentions",
- *   label = @Translation("Mentions")
+ *   label = @Translation("Mentions"),
+ *   module = "ckeditor_mentions"
  * )
  */
 class Mentions extends CKEditorPluginBase implements CKEditorPluginConfigurableInterface, CKEditorPluginContextualInterface, CKEditorPluginCssInterface {
@@ -23,7 +24,7 @@ class Mentions extends CKEditorPluginBase implements CKEditorPluginConfigurableI
    * {@inheritdoc}
    */
   public function getDependencies(Editor $editor) {
-    return [];
+    return ['autocomplete', 'textmatch', 'ajax', 'xml', 'textwatcher'];
   }
 
   /**
@@ -41,9 +42,13 @@ class Mentions extends CKEditorPluginBase implements CKEditorPluginConfigurableI
 
     return [
       'mentions' => [
-        'image' => !empty($settings['plugins']['mentions']['image']) ? $settings['plugins']['mentions']['image'] : FALSE,
-        'charcount' => !empty($settings['plugins']['mentions']['charcount']) ? $settings['plugins']['mentions']['charcount'] : 3,
-        'timeout' => !empty($settings['plugins']['mentions']['timeout']) ? $settings['plugins']['mentions']['timeout'] : 500,
+        [
+          'throttle' => $settings['plugins']['mentions']['timeout'],
+          'minChars' => $settings['plugins']['mentions']['charcount'],
+          'feed' => '/ckeditor-mentions/ajax/{encodedQuery}',
+          'itemTemplate' => '<li data-id="{id}">' . $settings['plugins']['mentions']['item_template'] . '</li>',
+          'outputTemplate' => $settings['plugins']['mentions']['output_template'],
+        ],
       ],
     ];
   }
@@ -52,7 +57,7 @@ class Mentions extends CKEditorPluginBase implements CKEditorPluginConfigurableI
    * {@inheritdoc}
    */
   public function getFile() {
-    return drupal_get_path('module', 'ckeditor_mentions') . '/js/plugins/mentions/plugin.js';
+    return 'libraries/ckeditor/plugins/mentions/plugin.js';
   }
 
   /**
@@ -60,25 +65,15 @@ class Mentions extends CKEditorPluginBase implements CKEditorPluginConfigurableI
    */
   public function isEnabled(Editor $editor) {
     $settings = $editor->getSettings();
-    return isset($settings['plugins']['mentions']) ? $settings['plugins']['mentions']['enable'] : FALSE;
-  }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function getCssFiles(Editor $editor) {
-    return [
-      drupal_get_path('module', 'ckeditor_mentions') . '/css/plugins/mentions/ckeditor_mentions.css',
-    ];
+    return (isset($settings['plugins']['mentions']['enable']) && (bool) $settings['plugins']['mentions']['enable']);
   }
 
   /**
    * {@inheritdoc}
    */
-  public function getLibraries(Editor $editor) {
-    return [
-      'ckeditor_mentions/drupal.ckeditor.plugins.mentions',
-    ];
+  public function getCssFiles(Editor $editor) {
+    return [];
   }
 
   /**
@@ -93,17 +88,11 @@ class Mentions extends CKEditorPluginBase implements CKEditorPluginConfigurableI
       '#default_value' => !empty($settings['plugins']['mentions']['enable']) ? $settings['plugins']['mentions']['enable'] : FALSE,
     ];
 
-    $form['image'] = [
-      '#type' => 'checkbox',
-      '#title' => $this->t('Enable User Icon'),
-      '#default_value' => !empty($settings['plugins']['mentions']['image']) ? $settings['plugins']['mentions']['image'] : FALSE,
-    ];
-
     $form['charcount'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Character Count'),
       '#description' => $this->t('Enter minimum number of characters that must be typed to trigger mention match.'),
-      '#default_value' => !empty($settings['plugins']['mentions']['charcount']) ? $settings['plugins']['mentions']['charcount'] : 3,
+      '#default_value' => !empty($settings['plugins']['mentions']['charcount']) ? $settings['plugins']['mentions']['charcount'] : 0,
     ];
 
     $form['timeout'] = [
@@ -113,7 +102,23 @@ class Mentions extends CKEditorPluginBase implements CKEditorPluginConfigurableI
       '#default_value' => !empty($settings['plugins']['mentions']['timeout']) ? $settings['plugins']['mentions']['timeout'] : 500,
     ];
 
-    $form['charcount']['#element_validate'][] = [$this, 'isPositiveNumber'];
+    $form['item_template'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t("The panel's item template used to render matches in the dropdown."),
+      '#description' => $this->t('Placeholders you can put into template: user_page (entity.canonical page), account_name, realname, email, avatar (user picture url), id.
+      The placeholder should wrapped by curly braces - {placeholder}. <br/>
+      Example: &lt;a href="{user_page}"&gt;{first_name}&lt;/a&gt;'),
+      '#default_value' => $settings['plugins']['mentions']['item_template'] ?? '<img class="photo" src="{avatar}" /><strong class="realname">{realname}</strong>',
+    ];
+
+    $form['output_template'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Template of markup to be inserted as the autocomplete item gets committed.'),
+      '#description' => $this->t('Can be used same placeholders as in item template. Always put the "data-mention" attribute with id placeholder.'),
+      '#default_value' => $settings['plugins']['mentions']['output_template'] ?? '<a data-mention="{id}" href="{user_page}">@{realname}</a><span>&nbsp;</span>',
+    ];
+
+    $form['charcount']['#element_validate'][] = [$this, 'isPositiveOrZeroNumber'];
     $form['timeout']['#element_validate'][] = [$this, 'isPositiveNumber'];
 
     return $form;
@@ -129,7 +134,21 @@ class Mentions extends CKEditorPluginBase implements CKEditorPluginConfigurableI
    */
   public function isPositiveNumber(array $element, FormStateInterface $form_state) {
     if (!is_numeric($element['#value']) || $element['#value'] < 1) {
-      $form_state->setError($element, 'Value must be a positive integer.');
+      $form_state->setError($element, $this->t('Value must be a positive integer.'));
+    }
+  }
+
+  /**
+   * Check if value is positive or zero.
+   *
+   * @param array $element
+   *   The Form element.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The FormState Object.
+   */
+  public function isPositiveOrZeroNumber(array $element, FormStateInterface $form_state) {
+    if (!is_numeric($element['#value']) || $element['#value'] < 0) {
+      $form_state->setError($element, $this->t('Value must be a positive integer or zero.'));
     }
   }
 
diff --git a/src/Plugin/CKEditorPlugin/TextMatch.php b/src/Plugin/CKEditorPlugin/TextMatch.php
new file mode 100644
index 0000000..915c3bb
--- /dev/null
+++ b/src/Plugin/CKEditorPlugin/TextMatch.php
@@ -0,0 +1,55 @@
+<?php
+
+namespace Drupal\ckeditor_mentions\Plugin\CKEditorPlugin;
+
+use Drupal\ckeditor\CKEditorPluginInterface;
+use Drupal\Core\Plugin\PluginBase;
+use Drupal\editor\Entity\Editor;
+
+/**
+ * Defines the "mentions" plugin.
+ *
+ * @CKEditorPlugin(
+ *   id = "textmatch",
+ *   label = @Translation("Text Match"),
+ *   module = "ckeditor_mention"
+ * )
+ */
+class TextMatch extends PluginBase implements CKEditorPluginInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getLibraries(Editor $editor) {
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDependencies(Editor $editor) {
+    return ['textwatcher'];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isInternal() {
+    return FALSE;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFile() {
+    return 'libraries/ckeditor/plugins/textmatch/plugin.js';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getConfig(Editor $editor) {
+    return [];
+  }
+
+}
diff --git a/src/Plugin/CKEditorPlugin/TextWatcher.php b/src/Plugin/CKEditorPlugin/TextWatcher.php
new file mode 100644
index 0000000..e24767b
--- /dev/null
+++ b/src/Plugin/CKEditorPlugin/TextWatcher.php
@@ -0,0 +1,55 @@
+<?php
+
+namespace Drupal\ckeditor_mentions\Plugin\CKEditorPlugin;
+
+use Drupal\ckeditor\CKEditorPluginInterface;
+use Drupal\Core\Plugin\PluginBase;
+use Drupal\editor\Entity\Editor;
+
+/**
+ * Defines the "mentions" plugin.
+ *
+ * @CKEditorPlugin(
+ *   id = "textwatcher",
+ *   label = @Translation("Text Watcher"),
+ *   module = "ckeditor_mention"
+ * )
+ */
+class TextWatcher extends PluginBase implements CKEditorPluginInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getLibraries(Editor $editor) {
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDependencies(Editor $editor) {
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isInternal() {
+    return FALSE;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFile() {
+    return 'libraries/ckeditor/plugins/textwatcher/plugin.js';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getConfig(Editor $editor) {
+    return [];
+  }
+
+}
diff --git a/src/Plugin/CKEditorPlugin/Xml.php b/src/Plugin/CKEditorPlugin/Xml.php
new file mode 100644
index 0000000..cf8d8ab
--- /dev/null
+++ b/src/Plugin/CKEditorPlugin/Xml.php
@@ -0,0 +1,55 @@
+<?php
+
+namespace Drupal\ckeditor_mentions\Plugin\CKEditorPlugin;
+
+use Drupal\ckeditor\CKEditorPluginInterface;
+use Drupal\Core\Plugin\PluginBase;
+use Drupal\editor\Entity\Editor;
+
+/**
+ * Defines the "mentions" plugin.
+ *
+ * @CKEditorPlugin(
+ *   id = "xml",
+ *   label = @Translation("xml"),
+ *   module = "ckeditor_mention"
+ * )
+ */
+class Xml extends PluginBase implements CKEditorPluginInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFile() {
+    return 'libraries/ckeditor/plugins/xml/plugin.js';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getLibraries(Editor $editor) {
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDependencies(Editor $editor) {
+    return [];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isInternal() {
+    return FALSE;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getConfig(Editor $editor) {
+    return [];
+  }
+
+}
